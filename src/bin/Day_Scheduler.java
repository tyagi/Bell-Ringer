package bin;

import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.IntBuffer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Umesh Tyagi
 */
public class Day_Scheduler extends javax.swing.JFrame {

    /**
     * Creates new form Day_Scheduler
     */
    String filename = "BellTime.file";
    static int OLD_ROWS = 0;
    public Day_Scheduler() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        daySchedulerLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        deleteAll = new javax.swing.JButton();
        addBell = new javax.swing.JButton();
        deleteBell = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        print = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TimeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        daySchedulerLabel.setFont(new java.awt.Font("Old English Text MT", 0, 36)); // NOI18N
        daySchedulerLabel.setText("Day Scheduler");

        deleteAll.setText("Delete All");
        deleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllActionPerformed(evt);
            }
        });

        addBell.setText("Add Bell");
        addBell.setToolTipText("Click To ADD BELL");
        addBell.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBellActionPerformed(evt);
            }
        });

        deleteBell.setText("Delete Bell");
        deleteBell.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBellActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        save.setText("Save And Exit");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(addBell, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(deleteBell)
                .addGap(29, 29, 29)
                .addComponent(deleteAll)
                .addGap(30, 30, 30)
                .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(save)
                .addGap(31, 31, 31)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addBell, deleteAll, deleteBell, exit, print, save});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(exit)
                    .addComponent(save)
                    .addComponent(print)
                    .addComponent(deleteAll)
                    .addComponent(deleteBell)
                    .addComponent(addBell))
                .addContainerGap())
        );

        try
        {
            String datafile = "BellTime.file";
            FileReader fin = new FileReader(datafile);
            DefaultTableModel m = Data.createTableModel(fin,
                new Vector<Object>(Arrays.asList(
                    new String[] { "Start Time", "Duration", "Sound File" })));
        TimeTable.setModel(m);
    }
    catch(Exception e)
    {
        System.out.println(e);
    }
    OLD_ROWS = TimeTable.getRowCount();
    TimeTable.getTableHeader().setReorderingAllowed(false);
    TimeTable.getColumn("Start Time").setCellRenderer(new DateCellRenderer());
    jScrollPane1.setViewportView(TimeTable);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane1)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(32, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(daySchedulerLabel)
            .addGap(295, 295, 295))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addComponent(daySchedulerLabel)
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(18, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBellActionPerformed
        // TODO add your handling code here:
        Add_Bell.main(null);
        
    }//GEN-LAST:event_addBellActionPerformed

    private void deleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel)TimeTable.getModel(); 
        int totalRow = tm.getRowCount()-1;
        while(totalRow>=0)
        {
           tm.removeRow(totalRow);
           totalRow--;
        }
        OLD_ROWS = 0;
    }//GEN-LAST:event_deleteAllActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void deleteBellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBellActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm = (DefaultTableModel)TimeTable.getModel();
        int selRowIndex = TimeTable.getSelectedRow();
        if(selRowIndex>=0)
        {
            tm.removeRow(selRowIndex);
            if(selRowIndex+1<=OLD_ROWS)
                OLD_ROWS--;
        }
    }//GEN-LAST:event_deleteBellActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            boolean print = TimeTable.print();
        } catch (PrinterException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_printActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        
        File file = new File("BellTime.file");
        FileWriter data;
        DateFormat df;
        try{
             data = new FileWriter(file);
             for(int i=0; i< TimeTable.getRowCount(); i++) {
             for(int j=0; j < TimeTable.getColumnCount(); j++) 
              {
                  if(j==0)
                  {
                      if(i>=OLD_ROWS)
                          df = new SimpleDateFormat("E MMM d HH:mm:ss z yy");
                      else
                          df = new SimpleDateFormat("HH:mm:ss");
                      String dateStr = TimeTable.getValueAt(i, j).toString();
                      Date date = null;
                      date = df.parse(dateStr);
                      String strDate = new SimpleDateFormat("HH:mm:ss").format((Date)date);
                      data.write(strDate+"\t");
                  }
                  else
                  {
                      data.write(TimeTable.getValueAt(i, j).toString()+"\t");
                  }
              }
              data.write("\r\n");
            }
            data.close();
          }
          catch(Exception e)
          { 
              System.out.println(e); 
          }
        this.dispose();
    }//GEN-LAST:event_saveActionPerformed

    
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        
    }//GEN-LAST:event_formWindowGainedFocus

       /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day_Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day_Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day_Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day_Scheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Day_Scheduler().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTable TimeTable;
    private javax.swing.JButton addBell;
    private javax.swing.JLabel daySchedulerLabel;
    private javax.swing.JButton deleteAll;
    private javax.swing.JButton deleteBell;
    private javax.swing.JButton exit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton print;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
}
